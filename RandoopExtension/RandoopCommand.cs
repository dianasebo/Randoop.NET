using Microsoft.VisualStudio.Shell;
using System;
using System.ComponentModel.Design;
using System.IO;
using System.Windows.Forms;
using Task = System.Threading.Tasks.Task;

namespace RandoopExtension
{
    /// <summary>
    /// Command handler
    /// </summary>
    internal sealed class RandoopCommand
    {
        /// <summary>
        /// Command ID.
        /// </summary>
        public const int CommandId = 0x0100;

        /// <summary>
        /// Command menu group (command set GUID).
        /// </summary>
        public static readonly Guid CommandSet = new Guid("eeb163e2-1b9a-4977-8d34-1d1be12accc6");

        /// <summary>
        /// VS Package that provides this command, not null.
        /// </summary>
        private readonly AsyncPackage package;

        /// <summary>
        /// Initializes a new instance of the <see cref="RandoopCommand"/> class.
        /// Adds our command handlers for menu (commands must exist in the command table file)
        /// </summary>
        /// <param name="package">Owner package, not null.</param>
        /// <param name="commandService">Command service to add command to, not null.</param>
        private RandoopCommand(AsyncPackage package, OleMenuCommandService commandService)
        {
            this.package = package ?? throw new ArgumentNullException(nameof(package));
            commandService = commandService ?? throw new ArgumentNullException(nameof(commandService));

            var menuCommandID = new CommandID(CommandSet, CommandId);
            var menuItem = new MenuCommand(this.Execute, menuCommandID);
            commandService.AddCommand(menuItem);
        }

        /// <summary>
        /// Gets the instance of the command.
        /// </summary>
        public static RandoopCommand Instance
        {
            get;
            private set;
        }

        /// <summary>
        /// Gets the service provider from the owner package.
        /// </summary>
        private Microsoft.VisualStudio.Shell.IAsyncServiceProvider ServiceProvider
        {
            get
            {
                return this.package;
            }
        }

        /// <summary>
        /// Initializes the singleton instance of the command.
        /// </summary>
        /// <param name="package">Owner package, not null.</param>
        public static async Task InitializeAsync(AsyncPackage package)
        {
            // Switch to the main thread - the call to AddCommand in RandoopCommand's constructor requires
            // the UI thread.
            await ThreadHelper.JoinableTaskFactory.SwitchToMainThreadAsync(package.DisposalToken);

            OleMenuCommandService commandService = await package.GetServiceAsync(typeof(IMenuCommandService)) as OleMenuCommandService;
            Instance = new RandoopCommand(package, commandService);
        }

        /// <summary>
        /// This function is the callback used to execute the command when the menu item is clicked.
        /// See the constructor to see how the menu item is associated with this function using
        /// OleMenuCommandService service and MenuCommand class.
        /// </summary>
        /// <param name="sender">Event sender.</param>
        /// <param name="e">Event args.</param>
        private void Execute(object sender, EventArgs e)
        {
            ThreadHelper.ThrowIfNotOnUIThread();

            string installPath = Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location);
            var randoopPath = installPath + "\\randoop-NET-release";

            var argumentsDialog = new Arguments(randoopPath);
            argumentsDialog.ShowDialog();

            string randoopExePath = randoopPath + "\\bin\\Randoop.exe";

            if (!File.Exists(randoopExePath))
            {
                MessageBox.Show("Can't find Randoop.exe!", "ERROR");
                return;
            }

            var prg = new Progress(argumentsDialog.TestFrameworkName);
            int totalTime = 100;

            prg.setTotalTime(totalTime);
            prg.setRandoopExe(randoopExePath);
            prg.setRandoopArg(argumentsDialog.ArgumentsString);

            string out_dir = argumentsDialog.OutputDirectory;
            int nTestPfile = 0;

            prg.setOutDir(out_dir);
            prg.setTestpFile(nTestPfile);

            string dllTest = argumentsDialog.UnitUnderTest;
            prg.setObjTested(dllTest);

            prg.ShowDialog();

            if (prg.isNormal() == false)
            {
                return;
            }

            string pathToTestProject = new TestProjectManager().CreateTestProject(out_dir, dllTest, RandoopCommandPackage.App.Solution);
            if (!string.IsNullOrEmpty(pathToTestProject))
            {
                MessageBox.Show("Test file is created in project: " + pathToTestProject);
                //invoke ie to open index.html generated by Randoop
                System.Diagnostics.Process.Start("IEXPLORE.EXE", pathToTestProject + "\\index.html");
            }

            return;
        }
    }
}
